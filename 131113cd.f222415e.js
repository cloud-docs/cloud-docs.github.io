(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{112:function(e,a,n){"use strict";n.r(a),a.default=n.p+"assets/images/portada-3392bf8af3ed98994504665b85fcf27b.jpg"},53:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return s})),n.d(a,"metadata",(function(){return l})),n.d(a,"rightToc",(function(){return i})),n.d(a,"default",(function(){return u}));var t=n(2),r=n(6),o=(n(0),n(76)),c=n(78),s={id:"nivelacion-kubernetes",title:"Nivelaci\xf3n Kubernetes",description:"Introducci\xf3n a Kubernetes para desarrolladores Backend.",keywords:["Kubernetes","Introducci\xf3n"],image:"https://miro.medium.com/fit/c/256/256/2*XKiHV-3_LJvO6xeiGKheDQ.png"},l={unversionedId:"architectures/nivelacion-kubernetes",id:"architectures/nivelacion-kubernetes",isDocsHomePage:!1,title:"Nivelaci\xf3n Kubernetes",description:"Introducci\xf3n a Kubernetes para desarrolladores Backend.",source:"@site/docs/architectures/nivelacion-kubernetes.mdx",slug:"/architectures/nivelacion-kubernetes",permalink:"/docs/architectures/nivelacion-kubernetes",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/architectures/nivelacion-kubernetes.mdx",version:"current",sidebar:"someSidebar",previous:{title:"Vigila la capa gratuita desde Data Studio",permalink:"/docs/articles/serie-capa-gratuita/vigila-el-uso-de-la-capa-gratuita-desde-data-studio"},next:{title:"This is Document Number 3",permalink:"/docs/articles/doc3"}},i=[{value:"Slides",id:"slides",children:[]},{value:"Como utilizar",id:"como-utilizar",children:[{value:"1 - App Base",id:"1---app-base",children:[]},{value:"2 - Dockerfile",id:"2---dockerfile",children:[]},{value:"3 - Creamos el Balanceador de carga",id:"3---creamos-el-balanceador-de-carga",children:[]},{value:"4 - Creamos el Deployment",id:"4---creamos-el-deployment",children:[]},{value:"5 - Exponemos el nombre de cada pod como variable de entorno.",id:"5---exponemos-el-nombre-de-cada-pod-como-variable-de-entorno",children:[]},{value:"6 - Limitamos el consumo de cada Pod",id:"6---limitamos-el-consumo-de-cada-pod",children:[]},{value:"7 - Este commit se perdio en el limbo XD",id:"7---este-commit-se-perdio-en-el-limbo-xd",children:[]},{value:"8 - Una mirada final de lo que se puede hacer",id:"8---una-mirada-final-de-lo-que-se-puede-hacer",children:[]}]}],p={rightToc:i};function u(e){var a=e.components,s=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},p,s,{components:a,mdxType:"MDXLayout"}),Object(o.b)(c.a,{Photo:"https://miro.medium.com/fit/c/256/256/2*XKiHV-3_LJvO6xeiGKheDQ.png",Name:"Felipe Velasquez Castro",Position:"Google Developer Expert",mdxType:"Writter"}),Object(o.b)("p",null,Object(o.b)("img",{alt:"Portada",src:n(112).default})),Object(o.b)("h2",{id:"slides"},"Slides"),Object(o.b)("p",null,"Aqu\xed te de dejo los slides de la presentaci\xf3n original. ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://docs.google.com/presentation/d/1z1AW6JPWl381OLqKR2f9Sr8_lVQiufjjzWbEsK5pZMM"}),"Presentacion")),Object(o.b)("h2",{id:"como-utilizar"},"Como utilizar"),Object(o.b)("p",null,"Para entender mejor este ejemplo te recomiendo viajar entre los Commits."),Object(o.b)("p",null,"para viajar en el tiempo a trav\xe9s de los commits debes tomar los 7 caracteres de cada commit que viene ac\xe1 abajo y ejecutar:"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"git checkout XXXXXXX #(dc0f9d8 por ejemplo)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit dc0f9d8")),Object(o.b)("h3",{id:"1---app-base"},"1 - App Base"),Object(o.b)("p",null,"Nada que decir, esta es tu app y corre en tu pc con"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"npm install\n#esperar unos segundos y ejecutar con\nnode server.js\n")),Object(o.b)("p",null,"y el c\xf3digo es mas o menos as\xed"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"var express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hola Perro!');\n});\n\napp.listen(8080, function () {\n    console.log('Listos en el 8080');\n});\n")),Object(o.b)("p",null,"Pero como vimos en la presentaci\xf3n lo que gobierna el mundo hoy es Docker as\xed que veamos c\xf3mo montar nuestro servicio en docker as\xed que vamos al siguiente commit."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit 2dbad3a")),Object(o.b)("h3",{id:"2---dockerfile"},"2 - Dockerfile"),Object(o.b)("p",null,"Creamos el Dockerfile y ya tenemos nuestra App en un container."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-Dockerfile"}),'FROM node:alpine\n\nWORKDIR /app\nCOPY . .\nRUN npm i\nEXPOSE 8080\nCMD  ["node", "server.js"]\n')),Object(o.b)("p",null,"Excelente ya tenemos el Docker pero lo que queremos es que esto corra en la Nube as\xed que vamos al siguiente commit y veamos que necesitamos tener para hacer que nuestro servicio reciba trafico."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit d9b1e1d")),Object(o.b)("h3",{id:"3---creamos-el-balanceador-de-carga"},"3 - Creamos el Balanceador de carga"),Object(o.b)("p",null,"Aqui entramos en el mundo de Kuberneres."),Object(o.b)("p",null,"Creamos un service de tipo LoadBalancer que va a ser la puerta de entrada a nuestro servicio y se va a encargar de distribuir los request entre los Nodos, decir las m\xe1quinas virtuales en las que se despliegan nuestros Pods."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"kind: Service\napiVersion: v1\nmetadata:\n  name: lb\nspec:\nselector:\n    app: servicio\n\n#Lo realmente importante esta aca\nports:\n    - protocol: TCP\n    port: 80\n    targetPort: 8080\n\n#El tipo puede variar\ntype: LoadBalancer\n")),Object(o.b)("p",null,"Para crear este balanceador dentro de GCP y que apunte al servicio dentro de nuestro cluster basta con ejecutar:"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl apply -f service-load-balancer.yaml\n")),Object(o.b)("p",null,"Lo interesante esta por venir, vamos al siguiente commit."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit b77b4db")),Object(o.b)("h3",{id:"4---creamos-el-deployment"},"4 - Creamos el Deployment"),Object(o.b)("p",null,"Qui\xe9n se va a encargar de llevar nuestro contenedor a Kubernetes y crear las replicas necesarias es el Deployment."),Object(o.b)("p",null,'Pero antes tenemos que subir nuestro App "empaquetada" en Docker y dejarla en el Google Cloud Registry de nuestro proyecto. Para ello debemos "Tagear" la imagen con docker poniendo como tag la url que tendr\xe1 la imagen una vez que se suba al registry de Google en tu proyecto.'),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),'docker build -t "gcr.io/MY-PROYECTO-GCP/servicio:1" .\n')),Object(o.b)("p",null,"Y con el siguiente comando subimos la imagen tageada al registry."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"gcloud docker -- push -- gcr.io/MY-PROYECTO-GCP/servicio:1\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"-t")," para decir que vamos a tagear"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"gcr.io")," es el dominio que mediante el cual Google expone las im\xe1genes (Es accesible solo dentro del proyecto por defecto, si se desea abrir al mundo se debe dar permisos al Google Cloud Storage que crea para almacenar estas im\xe1genes en el proyecto)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},".")," para decir que el Dockerfile esta en el directorio actual")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: servicio\nspec:\n# La m\xe1gia comienza ac\xe1\n  replicas: 3\n\n  template:\n    metadata:\n      labels:\n        app: servicio\n    spec:\n  # y ac\xe1\n      containers:\n  # Puede ser una lista de contenedores en un POD\n        - name: servicio\n        image: "gcr.io/MY-PROYECTO-GCP/servicio:1"\n        ports:\n          - name: http\n          containerPort: 8080\n')),Object(o.b)("p",null,"Para aplicar esta configuraci\xf3n en nuestro cluster basta con escribir."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl apply -f deployment.yaml\n")),Object(o.b)("p",null,"Ya puedes probar tu servicio veamos que IP se asigno."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl get services\n")),Object(o.b)("p",null,"F\xedjate la IP que te asigno y puedes abrirla en el browser o hacer un curl a lo macho."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"curl http://<LA IP DEL BALACEADOR>/\n")),Object(o.b)("p",null,"Pero hagamos esto un poco m\xe1s interesante, entendamos c\xf3mo funciona el balanceo a nivel de Nodos y el balanceo a nivel de Pods (replicas)\npara eso vamos al siguiente commit."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit d9c0028")),Object(o.b)("h3",{id:"5---exponemos-el-nombre-de-cada-pod-como-variable-de-entorno"},"5 - Exponemos el nombre de cada pod como variable de entorno."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: servicio\nspec:\n# La m\xe1gia comienza ac\xe1\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: servicio\n    spec:\n  # y ac\xe1\n      containers:\n  # Puede ser una lista de contenedores en un POD\n        - name: servicio\n        image: "gcr.io/MY-PROYECTO-GCP/servicio:2"\n        ports:\n          - name: http\n          containerPort: 8080\n# Veamos que Pod nos responde al Balancear - Ver server.js              \n    env:\n      - name: MY_NODE_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: spec.nodeName            \n      - name: MY_POD_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: metadata.name\n')),Object(o.b)("p",null,"Para aplicar esta configuraci\xf3n en nuestro cluster basta con escribir."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl apply -f deployment.yaml\n")),Object(o.b)("p",null,"Y las leemos desde nuestro server.js"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"app.get('/', function (req, res) {\n    res.send({\n        nodo: process.env.MY_NODE_NAME,\n        pod: process.env.MY_POD_NAME\n    });\n});\n")),Object(o.b)("p",null,"Esto va a responder con el nombre del Nodo (la maquina virtual) y del Pod (Cada una de las replicas de nuestro servicio)."),Object(o.b)("p",null,"Quieres ver algo hermoso, ejecuta este comando y veras como funciona el balanceo en los dos niveles."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"while true; do sleep 0.1; curl http://<LA IP DEL BALACEADOR>/; echo -e '\\n';done\n")),Object(o.b)("p",null,"ya tienes una configuraci\xf3n b\xe1sica de tu servicio. Veamos algunos conceptos que le dar\xe1n m\xe1s robustez a tu soluci\xf3n en el siguiente commit."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit 88ad465")),Object(o.b)("h3",{id:"6---limitamos-el-consumo-de-cada-pod"},"6 - Limitamos el consumo de cada Pod"),Object(o.b)("p",null,"Con kubernetes podemos establecer cu\xe1nta RAM y cu\xe1nta CPU va a tener disponible cada POD, de esta forma podemos controlar el uso y evitar que un error de c\xf3digo eleve el uso de CPU y Memoria y pueda hacer caer al Nodo completo, solo por poner un ejemplo."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: servicio\nspec:\n# La m\xe1gia comienza ac\xe1\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: servicio\n    spec:\n  # y ac\xe1\n      containers:\n  # Puede ser una lista de contenedores en un POD\n        - name: servicio\n        image: "gcr.io/MY-PROYECTO-GCP/servicio:3"\n        ports:\n          - name: http\n          containerPort: 8080\n# Veamos que Pod nos responde al Balancear - Ver server.js              \n    env:\n      - name: MY_NODE_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: spec.nodeName            \n      - name: MY_POD_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: metadata.name\n\n    #Podemos limitar los recursos que utiliza cada Pod\n\n    resources:\n        limits:\n        cpu: 0.2\n        memory: "100Mi"\n')),Object(o.b)("p",null,"Ya a esta altura deber\xedas saber como aplicarlo pero te dejo el comando por si acaso."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl apply -f deployment.yaml\n")),Object(o.b)("h3",{id:"7---este-commit-se-perdio-en-el-limbo-xd"},"7 - Este commit se perdio en el limbo XD"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"commit 486b6c7")),Object(o.b)("h3",{id:"8---una-mirada-final-de-lo-que-se-puede-hacer"},"8 - Una mirada final de lo que se puede hacer"),Object(o.b)("p",null,"Lo \xfaltimo que veremos en este ejemplo son readinessProbe y livenessProbe."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"readinessProbe")," este mecanismo permite establecer cuando nuestro servicio esta listo para recibir trafico, y evitar que el balanceador le env\xede peticiones antes de que este todo listo a nivel de servicio."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"livenessProbe")," este mecanismo permite establecer un periodo de tiempo y un endpoint de nuestro servicio que sirva para preguntar si sigue con vida, de lo contrario Kubernetes va a matar al POD y crear uno nuevo, por que este no esta dando se\xf1ales de vida."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: servicio\nspec:\n# La m\xe1gia comienza ac\xe1\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: servicio\n    spec:\n  # y ac\xe1\n      containers:\n  # Puede ser una lista de contenedores en un POD\n        - name: servicio\n        image: "gcr.io/MY-PROYECTO-GCP/servicio:4"\n        ports:\n          - name: http\n          containerPort: 8080\n# Veamos que Pod nos responde al Balancear - Ver server.js              \n    env:\n      - name: MY_NODE_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: spec.nodeName            \n      - name: MY_POD_NAME\n      valueFrom:\n        fieldRef:\n        fieldPath: metadata.name\n\n    #Podemos limitar los recursos que utiliza cada Pod\n\n    resources:\n        limits:\n        cpu: 0.2\n        memory: "100Mi"\n\n    # Validamos que nuesto pod esta vivo\n    livenessProbe:\n        httpGet:\n        path: /health\n        port: 8080\n        scheme: HTTP\n        initialDelaySeconds: 5\n        periodSeconds: 15\n        timeoutSeconds: 5\n\n    # Esperamos a que este listo para mandarle carga \n    readinessProbe:\n        httpGet:\n        path: /ready\n        port: 8080\n        scheme: HTTP\n        initialDelaySeconds: 5\n        timeoutSeconds: 5\n')),Object(o.b)("p",null,"Si a esta altura no sabes como aplicar esta configuraci\xf3n estamos mal, pero te la dejo igual XD."),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-sh"}),"kubectl apply -f deployment.yaml\n")),Object(o.b)("p",null,"Espero que esto te sirva para entender c\xf3mo funciona b\xe1sicamente Kubernetes y como llevar tu servicio a la Nube muy f\xe1cilmente."),Object(o.b)("p",null,"Un abrazo."))}u.isMDXComponent=!0},76:function(e,a,n){"use strict";n.d(a,"a",(function(){return u})),n.d(a,"b",(function(){return b}));var t=n(0),r=n.n(t);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function c(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?c(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),p=function(e){var a=r.a.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},u=function(e){var a=p(e.components);return r.a.createElement(i.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},d=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=t,b=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.a.createElement(b,s(s({ref:a},i),{},{components:n})):r.a.createElement(b,s({ref:a},i))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78:function(e,a,n){"use strict";n.d(a,"a",(function(){return o}));var t=n(0),r=n.n(t);const o=({children:e,Name:a,Photo:n,Position:t})=>r.a.createElement("div",{className:"writter"},e,r.a.createElement("div",{className:"ilb"},r.a.createElement("a",{href:n},r.a.createElement("img",{alt:a,className:"",src:n,width:"80",height:"80"}))),r.a.createElement("div",{className:"ilb"},r.a.createElement("div",{className:""},r.a.createElement("p",{className:""},"Written by")),r.a.createElement("div",{className:""},r.a.createElement("h2",{className:""},a),r.a.createElement("div",{className:""})),r.a.createElement("div",{className:""},r.a.createElement("h4",{className:""},t))))}}]);